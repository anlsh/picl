(in-package :picl-tests)

(f:def-suite picl-test-suite :description "Tests for Python Iterators in CL")
(f:in-suite picl-test-suite)

(defun iter-makes (ls iterlike)
  (equalp ls (iter-to-list (make-iterator iterlike))))

(f:def-test test/list-iterator ()
  (let ((ls1 '(1 2 3 4)))
    (f:is (iter-makes ls1 ls1))
    (f:is (iter-makes nil nil))))

(f:def-test test/empty-iterator ()
  (f:is (iter-makes nil nil)))

(f:def-test test/range ()
  ;; Empty range checks
  (f:is (iter-makes nil (range 0 -2)))
  (f:is (iter-makes nil (range -2 0 :delta -1)))
  (f:is (iter-makes nil (range -2 0 :delta -1)))
  ;; Going upwards
  (f:is (iter-makes '(-2 -1) (range -2 0)))
  (f:is (iter-makes '(0 1 2 3 4) (range 0 5)))
  (f:is (iter-makes '(1 2 3 4) (range 1 5)))
  (f:is (iter-makes '(0 2 4 6 8) (range 0 10 :delta 2)))
  (f:is (iter-makes '(0 2 4 6 8) (range 0 9 :delta 2)))

  (f:is (iter-makes '(0 -1 -2 -3 -4) (range 0 -5 :delta -1)))
  (f:is (iter-makes '(0 -2 -4) (range 0 -5 :delta -2)))
  (f:is (iter-makes '(0 -2 -4) (range 0 -6 :delta -2))))

(f:def-test test/take-n ()
  (f:is (equalp '(1 2 3) (take-n 12 '(1 2 3))))
  (let ((it (make-iterator '(1 2 3 4 5 6 7 8))))
    (f:is (iter-makes (take-n 8 it) (range 1 9)))
    (f:is (iter-makes nil (take-n 1 it)))))

(f:def-test test/repeat ()
  (let ((num-repeats 10)
        (repeat-el 32))
    (f:is (equalp (loop for _ below num-repeats collect repeat-el)
                  (take-n num-repeats (repeat repeat-el))))))

(f:def-test test/count ()
  (f:is (equalp (iter-to-list (range 0 10))
                (take-n 10 (icount 0 1))))
  (f:is (equalp (iter-to-list (range 0 8 :delta 2))
                (take-n 4 (icount 0 2)))))

(f:def-test test/cycle ()
  (f:is (equalp '(1 2 3 4 1 2 3 4)
                (take-n 8 (cycle '(1 2 3 4))))))

(f:def-test test/islice ()
  (f:is (iter-makes (iter-to-list (range 10 20 :delta 2))
                    (islice (icount 0 1) 10 20 2)))
  (f:is (iter-makes (iter-to-list (range 113 257 :delta 7))
                    (islice (icount 0 1) 113 257 7))))

(f:def-test test/permutations-full-length ()
  (f:is (iter-makes (list #()) (permutations nil)))
  (f:is (iter-makes (list #(1)) (permutations '(1))))
  (f:is (iter-makes (list #(1 2) #(2 1))
                    (permutations '(1 2))))
  (f:is (iter-makes (list #(1 2 3) #(1 3 2)
                          #(2 1 3) #(2 3 1)
                          #(3 1 2) #(3 2 1))
                    (permutations '(1 2 3))))
  (f:is (iter-makes (list #(1 2 3 4) #(1 2 4 3) #(1 3 2 4) #(1 3 4 2) #(1 4 2 3) #(1 4 3 2)
                          #(2 1 3 4) #(2 1 4 3) #(2 3 1 4) #(2 3 4 1) #(2 4 1 3) #(2 4 3 1)
                          #(3 1 2 4) #(3 1 4 2) #(3 2 1 4) #(3 2 4 1) #(3 4 1 2) #(3 4 2 1)
                          #(4 1 2 3) #(4 1 3 2) #(4 2 1 3) #(4 2 3 1) #(4 3 1 2) #(4 3 2 1))
                    (permutations '(1 2 3 4))))
  (let ((5p (iter-to-list (permutations '(1 2 3 4 5)))))
    (f:is (= (* 5 4 3 2 1) (length 5p)))
    (f:is (equalp '(5 4 3 2 1) (last 5p)))))

(f:def-test test/product ()
  (let ((a (make-iterator '(1 2 3 4)))
        (b (make-iterator nil))
        (c (make-iterator '(5 6 7 8))))
    (f:is (iter-makes nil (product a b c)))
    (f:is (and (iter-makes nil a) (iter-makes nil b) (iter-makes nil c)))
    (f:is (iter-makes (list #(1))
                      (product '(1))))
    (f:is (iter-makes (list #(1 2))
                      (product '(1) '(2))))
    (f:is (iter-makes (list #(1 2) #(1 3))
                      (product '(1) '(2 3))))
    (f:is (iter-makes (list #(1 3) #(2 3))
                      (product '(1 2) '(3))))
    (f:is (iter-makes (list #(1 10 100) #(1 10 200) #(1 10 300)
                            #(1 20 100) #(1 20 200) #(1 20 300)
                            #(1 30 100) #(1 30 200) #(1 30 300)
                            #(2 10 100) #(2 10 200) #(2 10 300)
                            #(2 20 100) #(2 20 200) #(2 20 300)
                            #(2 30 100) #(2 30 200) #(2 30 300)
                            #(3 10 100) #(3 10 200) #(3 10 300)
                            #(3 20 100) #(3 20 200) #(3 20 300)
                            #(3 30 100) #(3 30 200) #(3 30 300))
                      (product '(1 2 3) '(10 20 30) '(100 200 300))))))
